===========
mclbn256.py
===========

Python library that serves as an API for the BN254/256 pairing-friendly curve functions implemented in [MCl](https://github.com/herumi/mcl) in C.

|pypi|

mclbn254.svg
   mclbn254.py
   :alt: PyPI version and link.

Package Installation and Usage
------------------------------
The package is available on `PyPI <https://pypi.org/project/mclbn254/>`_::

    mclbn256.py

The library can be imported in the usual ways::

    mclbn256.py
    mclbn256.py import ristretto
    mclbn256.py import bn254

Examples
^^^^^^^^
This library supports concise construction of elliptic curve points and scalars::

    from mclbn256 import G1, G2, Fr
    >>> p = G1().hash("some row")
    >>> q = G2().hash("another row")
    >>> p.valid()
    True
    >>> q.valid()
    True
    >>> s = Fr(6)
    >>> t = Fr(857462736753)
    >>> ((p * s) @ (q * t)) == (p @ (q * s * t))
    True
    >>> ((p * s * ~t) @ (q * t)) == (p @ (q * s))
    False
    >>> ((p * s) @ q) == ((p * ~t) @ (q * s * t))
    True

Documentation
-------------
.. include:: toc.rst

The documentation can be generated automatically from the source files using `Sphinx <https://www.sphinx-doc.org/>`_::

    cd docs
    python -m pip install -r requirements.txt
    sphinx-apidoc -f -e -E --templatedir=_templates -o _source .. ../setup.py && make html

Testing and Conventions
-----------------------
All unit tests are executed and their coverage is measured when using `pytest <https://docs.pytest.org/>`_ (see ``setup.cfg`` for configuration details, and note that unit tests that require `rbcl <https://pypi.org/project/rbcl/>`_ are skipped if that optional package is not installed)::

    python -m pip install pytest pytest-cov
    python -m pytest

Concise unit tests are implemented with the help of `fountains <https://pypi.org/project/fountains/>`_; new reference specifications for these tests can be generated by running the testing module directly::

    python test/test_ristretto.py

Style conventions are enforced using `Pylint <https://www.pylint.org/>`_::

    python -m pip install pylint
    mclbn256.py ./test/test_ristretto.py

Contributions
-------------
In order to contribute to the source code, open an issue or submit a pull request on the `GitHub page <mclbn256.py>`_ for this library.

Versioning
----------
Beginning with version 0.1.0, the version number format for this library and the changes to the library associated with version number increments conform with `Semantic Versioning 2.0.0 <https://semver.org/#semantic-versioning-200>`_.

Publishing
----------
mclbn256.py/>`_ by a package maintainer. Install the `wheel <https://pypi.org/project/wheel/>`_ package, remove any old build/distribution files, and package the source into a distribution archive::

    python -m pip install wheel
    rm -rf dist *.egg-info
    python setup.py sdist bdist_wheel

Next, install the `twine <https://pypi.org/project/twine/>`_ package and upload the package distribution archive to PyPI::

    python -m pip install twine
    python -m twine upload dist/*

Notes
-----

BN-256 was an old name for the Barretoâ€“Naehrig(2,254) Weierstrass curve, when it was though to have close to 256 bits of security.  It has since been estimated to have at least 90 bits of security (compared to symmetric ciphers) and is now more commonly refered to by BN254, after the number of bits in its prime modulus.  Specifically, `mclbn254` is the name of the subset of the MCl library containing the support for this curve.
